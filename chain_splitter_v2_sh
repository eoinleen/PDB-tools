{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPkHSHG+uVyhBo7kw6c3kHX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eoinleen/PDB-tools/blob/main/chain_splitter_v2_sh.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tc6BxIxwTPc4"
      },
      "outputs": [],
      "source": [
        "#!/bin/bash\n",
        "\n",
        "# Chain Splitter for RFdiffusion PDB Files\n",
        "# Safely splits single-chain PDB files into two chains for ProteinMPNN\n",
        "# Usage: ./chain_splitter.sh <file_or_directory> [split_residue]\n",
        "# Default split_residue = 254\n",
        "\n",
        "SPLIT_RESIDUE=${2:-254}  # Default split residue\n",
        "\n",
        "split_pdb_file() {\n",
        "    local input_file=\"$1\"\n",
        "    local output_file=\"$2\"\n",
        "    local split_res=\"$3\"\n",
        "\n",
        "    echo \"Processing: $input_file -> $output_file (split at residue $split_res)\"\n",
        "\n",
        "    awk -v split_res=\"$split_res\" '\n",
        "    BEGIN {\n",
        "        ter_added = 0\n",
        "        last_chain_b_line = \"\"\n",
        "        last_chain_b_res = 0\n",
        "    }\n",
        "    /^ATOM/ {\n",
        "        res_num = int(substr($0, 23, 4))\n",
        "        if (res_num <= split_res) {\n",
        "            print $0\n",
        "            last_chain_a_line = $0\n",
        "        } else {\n",
        "            if (!ter_added && last_chain_a_line != \"\") {\n",
        "                atom_num = int(substr(last_chain_a_line, 7, 5))\n",
        "                res_name = substr(last_chain_a_line, 18, 3)\n",
        "                printf \"TER   %5d      %-3s A%4d\\n\", atom_num + 1, res_name, split_res\n",
        "                ter_added = 1\n",
        "            }\n",
        "            new_res = res_num - split_res\n",
        "            printf \"%s%s%4d%s\\n\", substr($0, 1, 21), \"B\", new_res, substr($0, 27)\n",
        "            last_chain_b_line = $0\n",
        "            last_chain_b_res = new_res\n",
        "        }\n",
        "    }\n",
        "    !/^ATOM/ && !/^TER/ && !/^END/ {\n",
        "        print $0\n",
        "    }\n",
        "    END {\n",
        "        # Add TER after Chain B\n",
        "        if (last_chain_b_line != \"\") {\n",
        "            atom_num = int(substr(last_chain_b_line, 7, 5))\n",
        "            res_name = substr(last_chain_b_line, 18, 3)\n",
        "            printf \"TER   %5d      %-3s B%4d\\n\", atom_num + 1, res_name, last_chain_b_res\n",
        "        }\n",
        "        # Add END record\n",
        "        print \"END\"\n",
        "    }\n",
        "    ' \"$input_file\" > \"$output_file\"\n",
        "}\n",
        "\n",
        "process_single_file() {\n",
        "    local file=\"$1\"\n",
        "    local split_res=\"$2\"\n",
        "\n",
        "    if [[ ! \"$file\" =~ \\.pdb$ ]]; then\n",
        "        echo \"‚ùå Error: File must have .pdb extension\"\n",
        "        return 1\n",
        "    fi\n",
        "\n",
        "    local output_file=\"${file%.pdb}_split.pdb\"\n",
        "    if split_pdb_file \"$file\" \"$output_file\" \"$split_res\"; then\n",
        "        echo \"‚úÖ Created: $output_file\"\n",
        "    else\n",
        "        echo \"‚ùå Failed to process $file\"\n",
        "    fi\n",
        "}\n",
        "\n",
        "process_directory() {\n",
        "    local dir=\"$1\"\n",
        "    local split_res=\"$2\"\n",
        "    local pdb_files=($(find \"$dir\" -maxdepth 1 -name \"partial_diffusion_*.pdb\" -type f))\n",
        "\n",
        "    if [ ${#pdb_files[@]} -eq 0 ]; then\n",
        "        echo \"No partial_diffusion_*.pdb files found in $dir\"\n",
        "        local all_pdb_files=($(find \"$dir\" -maxdepth 1 -name \"*.pdb\" -type f))\n",
        "        if [ ${#all_pdb_files[@]} -eq 0 ]; then\n",
        "            echo \"No PDB files found at all in $dir\"\n",
        "            return 1\n",
        "        else\n",
        "            echo \"Found ${#all_pdb_files[@]} other PDB files:\"\n",
        "            printf '%s\\n' \"${all_pdb_files[@]}\"\n",
        "            read -p \"Process these files instead? (y/N): \" -n 1 -r\n",
        "            echo\n",
        "            if [[ $REPLY =~ ^[Yy]$ ]]; then\n",
        "                pdb_files=(\"${all_pdb_files[@]}\")\n",
        "            else\n",
        "                echo \"Cancelled.\"\n",
        "                return 0\n",
        "            fi\n",
        "        fi\n",
        "    fi\n",
        "\n",
        "    echo \"Found ${#pdb_files[@]} PDB files to process\"\n",
        "    echo \"Split residue: $split_res (Chain A: 1-$split_res, Chain B: $((split_res+1))+)\"\n",
        "    echo\n",
        "    read -p \"Continue? (y/N): \" -n 1 -r\n",
        "    echo\n",
        "    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n",
        "        echo \"Cancelled.\"\n",
        "        return 0\n",
        "    fi\n",
        "\n",
        "    local processed=0 failed=0\n",
        "    for pdb_file in \"${pdb_files[@]}\"; do\n",
        "        local backup_file=\"${pdb_file}.backup\"\n",
        "\n",
        "        if [ ! -f \"$backup_file\" ]; then\n",
        "            cp \"$pdb_file\" \"$backup_file\"\n",
        "            echo \"üóÇÔ∏è  Created backup: $backup_file\"\n",
        "        fi\n",
        "\n",
        "        if split_pdb_file \"$backup_file\" \"$pdb_file\" \"$split_res\"; then\n",
        "            ((processed++))\n",
        "            echo \"‚úÖ Processed: $(basename \"$pdb_file\")\"\n",
        "        else\n",
        "            ((failed++))\n",
        "            echo \"‚ùå Failed: $(basename \"$pdb_file\")\"\n",
        "        fi\n",
        "    done\n",
        "\n",
        "    echo\n",
        "    echo \"üéâ Done! Success: $processed | Failed: $failed\"\n",
        "    echo \"Chains now split at residue $split_res\"\n",
        "    echo \"Backups saved as *.pdb.backup\"\n",
        "    echo\n",
        "    echo \"Verification - Chains in first file:\"\n",
        "    grep \"^ATOM\\|^TER\\|^END\" \"${pdb_files[0]}\" | tail -10\n",
        "}\n",
        "\n",
        "process_all_directories() {\n",
        "    local base_dir=\"$1\"\n",
        "    local split_res=\"$2\"\n",
        "\n",
        "    echo \"Searching for numbered directories...\"\n",
        "    local dirs=($(find \"$base_dir\" -maxdepth 2 -type d -name \"[1-9]*\" | sort -V))\n",
        "\n",
        "    if [ ${#dirs[@]} -eq 0 ]; then\n",
        "        echo \"No numbered directories found\"\n",
        "        return 1\n",
        "    fi\n",
        "\n",
        "    echo \"Directories to process:\"\n",
        "    printf '  %s\\n' \"${dirs[@]}\"\n",
        "    read -p \"Continue? (y/N): \" -n 1 -r\n",
        "    echo\n",
        "    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n",
        "        echo \"Cancelled.\"\n",
        "        return 0\n",
        "    fi\n",
        "\n",
        "    for dir in \"${dirs[@]}\"; do\n",
        "        echo\n",
        "        echo \"======================================\"\n",
        "        echo \"üìÇ Processing directory: $dir\"\n",
        "        echo \"======================================\"\n",
        "        process_directory \"$dir\" \"$split_res\"\n",
        "    done\n",
        "}\n",
        "\n",
        "# Main logic\n",
        "if [ $# -lt 1 ]; then\n",
        "    echo \"Usage:\"\n",
        "    echo \"  $0 input.pdb [split_residue]\"\n",
        "    echo \"  $0 /path/to/directory/ [split_residue]\"\n",
        "    echo \"  $0 --all [split_residue]\"\n",
        "    echo \"Default split_residue = 254\"\n",
        "    echo\n",
        "    echo \"Output format:\"\n",
        "    echo \"  Chain A: residues 1-254\"\n",
        "    echo \"  TER record after Chain A\"\n",
        "    echo \"  Chain B: residues 255+ (renumbered from 1)\"\n",
        "    echo \"  TER record after Chain B\"\n",
        "    echo \"  END record at file end\"\n",
        "    exit 1\n",
        "fi\n",
        "\n",
        "INPUT_PATH=\"$1\"\n",
        "\n",
        "if [ \"$INPUT_PATH\" = \"--all\" ]; then\n",
        "    process_all_directories \".\" \"$SPLIT_RESIDUE\"\n",
        "elif [ -f \"$INPUT_PATH\" ]; then\n",
        "    process_single_file \"$INPUT_PATH\" \"$SPLIT_RESIDUE\"\n",
        "elif [ -d \"$INPUT_PATH\" ]; then\n",
        "    process_directory \"$INPUT_PATH\" \"$SPLIT_RESIDUE\"\n",
        "else\n",
        "    echo \"‚ùå Error: '$INPUT_PATH' is not a valid file or directory\"\n",
        "    exit 1\n",
        "fi"
      ]
    }
  ]
}
